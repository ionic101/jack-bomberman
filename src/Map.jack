class Map {
    field Array cells;
    field int width;
    field int height;

    constructor Map new() {
        let width = 19;
        let height = 11;
        let cells = Array.new(width * height);
        do createMap();
        return this;
    }

    method void createMap() {
        var int x, y, curCellType;

        let x = 0;
        let y = 0;
        while (y < height) {
            while (x < width) {
                if (Utils.isEven(x) & Utils.isEven(y)) {
                    let curCellType = 1;
                }
                else {
                    let curCellType = 0;
                }
                do setCell(curCellType, x, y);
                let x = x + 1;
            }
            let y = y + 1;
            let x = 0;
        }

        let x = 0;
        while (x < width) {
            do setCell(1, x, 0); // set wall
            do setCell(1, x, height - 1); // set wall
            let x = x + 1;
        }
        let y = 1;
        while (y < (height - 1)) {
            do setCell(1, 0, y); // set wall
            do setCell(1, width - 1, y); // set wall
            let y = y + 1;
        }
        return;
    }

    method void setCell(int cellType, int x, int y) {
        let cells[y * width + x] = cellType;
        return;
    }

    method int getCell(int x, int y) {
        return cells[y * width + x];
    }

    method int getCellByVector(Vector2 coord) {
        return cells[coord.y() * width + coord.x()];
    }

    method void display() {
        var Vector2 curCellCoord;
        let curCellCoord = Vector2.zero();

        while (curCellCoord.y() < height) {
            while (curCellCoord.x() < width) {
                if (getCellByVector(curCellCoord) = 1) {
                    do Utils.displayCell(curCellCoord);
                }
                do curCellCoord.setX(curCellCoord.x() + 1);
            }
            do curCellCoord.setY(curCellCoord.y() + 1);
            do curCellCoord.setX(0);
        }
        do curCellCoord.dispose();
        return;
    }
}
