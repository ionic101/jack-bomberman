class Map {
    field Array cells;
    field int width;
    field int height;

    constructor Map new() {
        let width = 15;
        let height = 15;
        let cells = Array.new(width * height);
        do createMap();
        do generateBoxes();
        return this;
    }

    method void createMap() {
        var int x, y, curCellType;

        let x = 0;
        let y = 0;
        while (y < height) {
            while (x < width) {
                if (Utils.isEven(x) & Utils.isEven(y)) {
                    let curCellType = 1;
                }
                else {
                    let curCellType = 0;
                }
                do setCell(curCellType, x, y);
                let x = x + 1;
            }
            let y = y + 1;
            let x = 0;
        }

        let x = 0;
        while (x < width) {
            do setCell(1, x, 0); // set wall
            do setCell(1, x, height - 1); // set wall
            let x = x + 1;
        }
        let y = 1;
        while (y < (height - 1)) {
            do setCell(1, 0, y); // set wall
            do setCell(1, width - 1, y); // set wall
            let y = y + 1;
        }
        return;
    }

    method void spawnBox(LinkedList freeCells) {
        var Vector2 boxCoord;
        var int randIndex;
        let randIndex = Random.randRange(freeCells.getLength() - 1);
        let boxCoord = freeCells.pop(randIndex);
        do setCellByVector(2, boxCoord);
        do boxCoord.dispose();
        return;
    }

    method boolean isNotInIgnoreCoordsBoxes(Vector2 coord) {
        var Vector2 curCoord;
        var int i;
        var Array ignoreCoordsBoxes;
        let ignoreCoordsBoxes = Settings.getIgnoreCoordsBoxes();
        // remove ignoreCoordsBoxes
        let i = 0;
        while (i < 20) {
            let curCoord = ignoreCoordsBoxes[i];
            if (curCoord.equal(coord)) {
                return false;
            }
            let i = i + 1;
        }
        return true;
    }

    method void generateBoxes() {
        var int i, x, y;
        var LinkedList freeCells;
        var Vector2 curCoord;
        let freeCells = LinkedList.new();
        let x = 0;
        let y = 0;
        let curCoord = Vector2.zero();
        while (curCoord.x() < width) {
            while (curCoord.y() < height) {

                if (getCellByVector(curCoord) = 0 & isNotInIgnoreCoordsBoxes(curCoord)) {
                    do freeCells.add(curCoord.copy());
                }
                do curCoord.setY(curCoord.y() + 1);
            }
            do curCoord.setY(0);
            do curCoord.setX(curCoord.x() + 1);
        }

        let i = 0;
        while (i < Settings.getCountBoxes()) {
            do spawnBox(freeCells);
            let i = i + 1;
        }
        return;
    }

    method void setCell(int cellType, int x, int y) {
        let cells[y * width + x] = cellType;
        return;
    }

    method void setCellByVector(int cellType, Vector2 coord) {
        let cells[coord.y() * width + coord.x()] = cellType;
        return;
    }

    method int getCell(int x, int y) {
        return cells[y * width + x];
    }

    method int getCellByVector(Vector2 coord) {
        return cells[coord.y() * width + coord.x()];
    }

    method void display() {
        var int curCellType;
        var Vector2 curCellCoord;
        let curCellCoord = Vector2.zero();

        while (curCellCoord.y() < height) {
            while (curCellCoord.x() < width) {
                let curCellType = getCellByVector(curCellCoord);
                if (curCellType = 1) {
                    do displayWall(curCellCoord);
                }
                if (curCellType = 2) {
                    do displayBox(curCellCoord);
                }
                do curCellCoord.setX(curCellCoord.x() + 1);
            }
            do curCellCoord.setY(curCellCoord.y() + 1);
            do curCellCoord.setX(0);
        }
        do curCellCoord.dispose();
        return;
    }

    method void displayWall(Vector2 coord) {
        var int memAddress; 
        let memAddress = Utils.getSpriteMemAddress(coord);
        do Memory.poke(memAddress, -1);
        do Memory.poke(memAddress +32, -2119);
        do Memory.poke(memAddress +64, -8977);
        do Memory.poke(memAddress +96, -1097);
        do Memory.poke(memAddress +128, -28673);
        do Memory.poke(memAddress +160, -1571);
        do Memory.poke(memAddress +192, -8329);
        do Memory.poke(memAddress +224, -2065);
        do Memory.poke(memAddress +256, -29251);
        do Memory.poke(memAddress +288, -265);
        do Memory.poke(memAddress +320, -4163);
        do Memory.poke(memAddress +352, -1289);
        do Memory.poke(memAddress +384, -28743);
        do Memory.poke(memAddress +416, -785);
        do Memory.poke(memAddress +448, -26723);
        do Memory.poke(memAddress +480, -1);
        return;
    }

    method void displayBox(Vector2 coord) {
        var int memAddress; 
        let memAddress = Utils.getSpriteMemAddress(coord);
        do Memory.poke(memAddress, -1);
        do Memory.poke(memAddress +32, -16381);
        do Memory.poke(memAddress +64, -24571);
        do Memory.poke(memAddress +96, -28663);
        do Memory.poke(memAddress +128, -30703);
        do Memory.poke(memAddress +160, -31711);
        do Memory.poke(memAddress +192, -32191);
        do Memory.poke(memAddress +224, -32383);
        do Memory.poke(memAddress +256, -32383);
        do Memory.poke(memAddress +288, -32191);
        do Memory.poke(memAddress +320, -31711);
        do Memory.poke(memAddress +352, -30703);
        do Memory.poke(memAddress +384, -28663);
        do Memory.poke(memAddress +416, -24571);
        do Memory.poke(memAddress +448, -16381);
        do Memory.poke(memAddress +480, -1);
        return;
    }
}
