class Enemy {
    field Vector2 coord;
    field Map map;

    field Vector2 moveDirection;
    static Vector2 directions;

    constructor Enemy new(Vector2 spawnCoord, Map _map) {
        let coord = spawnCoord;
        let map = _map;
        let moveDirection = Vector2.upReadOnly();
        return this;
    }

    method Vector2 getCoord() {
        return coord;
    }

    method void move() {
        var Vector2 newCoord;
        
        let newCoord = coord.add(moveDirection);
        if (map.getCellByVector(newCoord) = 0) {
            do coord.setX(newCoord.x());
            do coord.setY(newCoord.y());
        }
        else {
            do changeDirection();
        }
        do newCoord.dispose();
        return;
    }

    method void changeDirection() {
        var Vector2 curCoord;

        let curCoord = coord.add(Vector2.upReadOnly());
        if (map.getCellByVector(curCoord) = 0) {
            let moveDirection = Vector2.upReadOnly();
            do curCoord.dispose();
            return;
        }
        
        let curCoord = coord.add(Vector2.rightReadOnly());
        if (map.getCellByVector(curCoord) = 0) {
            let moveDirection = Vector2.rightReadOnly();
            do curCoord.dispose();
            return;
        }

        let curCoord = coord.add(Vector2.downReadOnly());
        if (map.getCellByVector(curCoord) = 0) {
            let moveDirection = Vector2.downReadOnly();
            do curCoord.dispose();
            return;
        }

        let curCoord = coord.add(Vector2.leftReadOnly());
        if (map.getCellByVector(curCoord) = 0) {
            let moveDirection = Vector2.leftReadOnly();
            do curCoord.dispose();
            return;
        }

        do curCoord.dispose();
        return;
    }

    method void display() {
        var int memAddress; 
        let memAddress = Utils.getSpriteMemAddress(coord);
        do Memory.poke(memAddress, 1008);
        do Memory.poke(memAddress +32, 2040);
        do Memory.poke(memAddress +64, 4092);
        do Memory.poke(memAddress +96, 2340);
        do Memory.poke(memAddress +128, 4092);
        do Memory.poke(memAddress +160, 4092);
        do Memory.poke(memAddress +192, 2040);
        do Memory.poke(memAddress +224, 1008);
        do Memory.poke(memAddress +256, 4092);
        do Memory.poke(memAddress +288, 8190);
        do Memory.poke(memAddress +320, 7158);
        do Memory.poke(memAddress +352, 1008);
        do Memory.poke(memAddress +384, 816);
        do Memory.poke(memAddress +416, 1848);
        return;
    }
}
