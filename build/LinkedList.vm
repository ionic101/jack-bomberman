function LinkedList.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push constant 0
pop this 0
push constant 0
pop this 1
push constant 0
pop this 2
push pointer 0
return
function LinkedList.add 3
push argument 0
pop pointer 0
push argument 1
call Node.new 1
pop local 1
push this 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
pop this 0
push local 1
pop this 1
goto IF_END0
label IF_FALSE0
push local 1
push this 1
call Node.setPrev 2
pop temp 0
push this 1
push local 1
call Node.setNext 2
pop temp 0
push local 1
pop this 1
push this 2
push constant 1
add
pop this 2
label IF_END0
push constant 0
return
function LinkedList.pop 3
push argument 0
pop pointer 0
push this 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push argument 1
lt
not
if-goto WHILE_END0
push local 1
call Node.getNext 1
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 1
call Node.getPrev 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
call Node.getNext 1
pop this 0
goto IF_END0
label IF_FALSE0
push local 1
push local 1
call Node.getNext 1
call Node.setPrev 2
pop temp 0
label IF_END0
push local 1
call Node.getNext 1
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
call Node.getPrev 1
pop this 1
goto IF_END1
label IF_FALSE1
push local 1
push local 1
call Node.getPrev 1
call Node.setNext 2
pop temp 0
label IF_END1
push local 1
call Node.getValue 1
pop local 0
push this 2
push constant 1
sub
pop this 2
push local 1
call Node.dispose 1
pop temp 0
push local 0
return
function LinkedList.getLength 0
push argument 0
pop pointer 0
push this 2
return
function LinkedList.getHead 0
push argument 0
pop pointer 0
push this 0
return
function LinkedList.getTail 0
push argument 0
pop pointer 0
push this 1
return
function LinkedList.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
